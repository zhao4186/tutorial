Install Kind k8s
Reference: https://kind.sigs.k8s.io/docs/user/quick-start/#installation

- curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.14.0/kind-linux-amd64
- chmod +x ./kind
- sudo mv ./kind /usr/local/bin/kind


Use Kind k8s single node
Reference: https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart

Create Kind k8s sungle node cluster
- create kind k8s cluster config file kindCluster.yaml 
  configure podSubnet and serviceSubnet
  disable default container network interface(CNI) plugin
- create cluster
  kind create cluster  --name wslkind --config kindCluster.yaml --kubeconfig /mnt/c/Users/zhao4/.kube/config
- export KUBECONFIG
  export KUBECONFIG=/mnt/c/Users/zhao4/.kube/config

Check pods in the cluster
- kubectl get pods -A -o wide
  You will see coredns-* pods are in pending status because there is no CNI and coredns-* can't get IP.

Install Calico CNI
- Download
  wget https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml
  wget https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml
- modify custom-resources.yaml to set CIDR of IPPOOL to the same as podSubnet
- create Calico CNI plugin
  kubectl create -f tigera-operator.yaml
  kubectl create -f custom-resources.yaml

Check pods in the cluster
- kubectl get pods -A -o wide
  You will see all pods are running after Calico CNI running


Test Calico policy
Reference: https://projectcalico.docs.tigera.io/security/tutorials/kubernetes-policy-advanced

Create a new namespace advanced-policy-demo
- kubectl create ns advanced-policy-demo

Create a Nginx pod
- kubectl create deployment --namespace=advanced-policy-demo nginx --image=nginx
- kubectl expose --namespace=advanced-policy-demo deployment nginx --port=80

Create a busybox to test nginx access
- kubectl run --namespace=advanced-policy-demo access --rm -ti --image busybox /bin/sh
- wget -q --timeout=5 nginx -O -
- nslookup nginx

Create network policy to deny all incoming traffic
- kubectl create -f calico-policy-deny-ingress.yaml
- test Nginx connectivity in busybox

Create an ingress rule for nginx
- kubectl create -f calico-policy-allow-ingress.yaml
- test Nginx connectivity in busybox

Create network policy to deny all outgoing traffic
- kubectl label namespace kube-system name=kube-system
- kubectl create -f calico-policy-deny-egress.yaml
- nslookup nginx

Create an egress rule for nslookup
- kubectl create -f calico-policy-allow-egress.yaml
- nslookup nginx


Kubernetes policy, demo
Reference: https://projectcalico.docs.tigera.io/security/tutorials/kubernetes-policy-demo/kubernetes-demo
